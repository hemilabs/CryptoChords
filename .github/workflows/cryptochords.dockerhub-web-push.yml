name: '[cryptochords] dockerhub web push'

on:
  push:
    tags:
      - 'v*'

jobs:
  dockerhubpush:
    name: '[cryptochords] dockerhub web push'
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/v}" >> $GITHUB_OUTPUT
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push cryptochords-web
        uses: docker/build-push-action@v3
        with:
          tags: hemilabs/cryptochords-web:${{ steps.vars.outputs.tag }}
          context: "{{defaultContext}}"
          file: "Dockerfile.web"
          push: true

  deploy_testnet:
    name: "Deploy Testnet to VKE"
    runs-on: "ubuntu-latest"
    needs: [ "dockerhubpush" ]
    permissions:
      contents: read
    environment:
      name: "staging"
      url: "https://cryptochords.hemi.xyz/"
    env:
      namespace: cryptochords
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.VKE_TEST_KUBECONFIG }}
          
      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v2
    
      - name: Configure K8s Cluster Access for VKE
        env:
          VKE_TEST_KUBECONFIG: ${{ secrets.VKE_TEST_KUBECONFIG }}
        run: |
          echo $VKE_TEST_KUBECONFIG > ./kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml
  
      - name: Create K8s Secrets
        run: |
          if kubectl get configmap cryptochords-config --namespace=${{ env.namespace }}; then
            echo "cryptochords-config already exists"
          else
            echo "Creating cryptochords-config"
            kubectl create configmap cryptochords-config \
            --from-literal=VITE_API_WEBSERVICE_URL=ws://localhost:3000 \
            --from-literal=VITE_USE_API_MOCK=false \
            --namespace=${{ env.namespace }}
          fi
          echo "Checking Dockerhub Secret"
  
      - name: Dockerhub Secrets
        run: |
          if kubectl get secret dockerhub-secret --namespace=${{ env.namespace }}; then
            echo "Dockerhub Secret already exists"
          else
            echo "Creating Dockerhub Secret"
            kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }} \
            --docker-email=${{ secrets.DOCKER_EMAIL }} \
            --namespace=${{ env.namespace }}
          fi

      - name: Update Image Tag in deployment
        run: |
              kustomize edit set image hemilabs/cryptochords-web:latest=hemilabs/cryptochords-web:${{ steps.vars.outputs.tag }}
              kustomize edit set namespace ${{ env.namespace }}
        working-directory: ./infrastructure/kustomize_web/overlays/testnet

      - name: Checking Kustomize
        run: |
          kustomize build ./infrastructure/kustomize_web/overlays/testnet
          kubectl get all --namespace=${{ env.namespace }}
      
      - name: Deploy to VKE
        run: kubectl apply -k ./infrastructure/kustomize_web/overylays/testnet

  deploy_staging:
    name: "Deploy Staging to VKE"
    runs-on: "ubuntu-latest"
    needs: ["deploy_testnet"]
    permissions:
      contents: read
    environment:
      name: "staging"
      url: "https://cryptochords.letshamsterdance.xyz/"
    env:
      namespace: cryptochords-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.VKE_STAGING_KUBECONFIG }}
      
      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Configure K8s Cluster Access for VKE
        env:
          VKE_STAGING_KUBECONFIG : ${{ secrets.VKE_STAGING_KUBECONFIG }}
        run: |
          echo $VKE_STAGING_KUBECONFIG > ./kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml

      - name: Cryptochords Configmap
        run: |
          if kubectl get configmap cryptochords-config --namespace=${{ env.namespace }}; then
            echo "cryptochords-config already exists"
          else
            echo "Creating cryptochords-config"
            kubectl create configmap cryptochords-config \
            --from-literal=VITE_API_WEBSERVICE_URL=${{ secrets.AWS_ACCESS__KEY_ID }} \
            --from-literal=VITE_USE_API_MOCK=false \
            --namespace=${{ env.namespace }}
          fi
          echo "Checking Dockerhub Secret"

      - name: Dockerhub Secrets
        run: |
          if kubectl get secret dockerhub-secret --namespace=${{ env.namespace }}; then
            echo "Dockerhub Secret already exists"
          else
            echo "Creating Dockerhub Secret"
            kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }} \
            --docker-email=${{ secrets.DOCKER_EMAIL }} \
            --namespace=${{ env.namespace }}
          fi

      - name: Update Image Tag in deployment
        run: |
          kustomize edit set image hemilabs/cryptochords-web:latest=hemilabs/cryptochords-web:${{ github.event.inputs.tag }}
          kustomize edit set namespace ${{ env.namespace }}
        working-directory: ./infrastructure/kustomize_web/base

      - name: Checking Kustomize
        run: |
          kustomize build ./infrastructure/kustomize_web/overlays/staging
          kubectl get all --namespace=${{ env.namespace }}

      - name: Deploy to VKE
        run: kubectl apply -k ./infrastructure/kustomize_web/overlays/staging